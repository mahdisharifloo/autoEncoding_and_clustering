<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (15 samples, 1.12%)</title><rect x="0.1498%" y="532" width="1.1236%" height="15" fill="rgb(227,0,7)"/><text x="0.3998%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (15 samples, 1.12%)</title><rect x="0.1498%" y="548" width="1.1236%" height="15" fill="rgb(217,0,24)"/><text x="0.3998%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (15 samples, 1.12%)</title><rect x="0.1498%" y="564" width="1.1236%" height="15" fill="rgb(221,193,54)"/><text x="0.3998%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (15 samples, 1.12%)</title><rect x="0.1498%" y="580" width="1.1236%" height="15" fill="rgb(248,212,6)"/><text x="0.3998%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (15 samples, 1.12%)</title><rect x="0.1498%" y="596" width="1.1236%" height="15" fill="rgb(208,68,35)"/><text x="0.3998%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.12%)</title><rect x="0.1498%" y="612" width="1.1236%" height="15" fill="rgb(232,128,0)"/><text x="0.3998%" y="622.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:27) (16 samples, 1.20%)</title><rect x="0.1498%" y="436" width="1.1985%" height="15" fill="rgb(207,160,47)"/><text x="0.3998%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (16 samples, 1.20%)</title><rect x="0.1498%" y="452" width="1.1985%" height="15" fill="rgb(228,23,34)"/><text x="0.3998%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (16 samples, 1.20%)</title><rect x="0.1498%" y="468" width="1.1985%" height="15" fill="rgb(218,30,26)"/><text x="0.3998%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (16 samples, 1.20%)</title><rect x="0.1498%" y="484" width="1.1985%" height="15" fill="rgb(220,122,19)"/><text x="0.3998%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (16 samples, 1.20%)</title><rect x="0.1498%" y="500" width="1.1985%" height="15" fill="rgb(250,228,42)"/><text x="0.3998%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 1.20%)</title><rect x="0.1498%" y="516" width="1.1985%" height="15" fill="rgb(240,193,28)"/><text x="0.3998%" y="526.50"></text></g><g><title>&lt;module&gt; (test.py:10) (19 samples, 1.42%)</title><rect x="0.0000%" y="52" width="1.4232%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (19 samples, 1.42%)</title><rect x="0.0000%" y="68" width="1.4232%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (19 samples, 1.42%)</title><rect x="0.0000%" y="84" width="1.4232%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="94.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 1.42%)</title><rect x="0.0000%" y="100" width="1.4232%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="110.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (19 samples, 1.42%)</title><rect x="0.0000%" y="116" width="1.4232%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="126.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (19 samples, 1.42%)</title><rect x="0.0000%" y="132" width="1.4232%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 1.42%)</title><rect x="0.0000%" y="148" width="1.4232%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (19 samples, 1.42%)</title><rect x="0.0000%" y="164" width="1.4232%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (19 samples, 1.42%)</title><rect x="0.0000%" y="180" width="1.4232%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (19 samples, 1.42%)</title><rect x="0.0000%" y="196" width="1.4232%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (19 samples, 1.42%)</title><rect x="0.0000%" y="212" width="1.4232%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 1.42%)</title><rect x="0.0000%" y="228" width="1.4232%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="238.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (18 samples, 1.35%)</title><rect x="0.0749%" y="244" width="1.3483%" height="15" fill="rgb(241,131,45)"/><text x="0.3249%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (18 samples, 1.35%)</title><rect x="0.0749%" y="260" width="1.3483%" height="15" fill="rgb(249,31,29)"/><text x="0.3249%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (18 samples, 1.35%)</title><rect x="0.0749%" y="276" width="1.3483%" height="15" fill="rgb(225,111,53)"/><text x="0.3249%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (18 samples, 1.35%)</title><rect x="0.0749%" y="292" width="1.3483%" height="15" fill="rgb(238,160,17)"/><text x="0.3249%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (18 samples, 1.35%)</title><rect x="0.0749%" y="308" width="1.3483%" height="15" fill="rgb(214,148,48)"/><text x="0.3249%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 1.35%)</title><rect x="0.0749%" y="324" width="1.3483%" height="15" fill="rgb(232,36,49)"/><text x="0.3249%" y="334.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (18 samples, 1.35%)</title><rect x="0.0749%" y="340" width="1.3483%" height="15" fill="rgb(209,103,24)"/><text x="0.3249%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (18 samples, 1.35%)</title><rect x="0.0749%" y="356" width="1.3483%" height="15" fill="rgb(229,88,8)"/><text x="0.3249%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (18 samples, 1.35%)</title><rect x="0.0749%" y="372" width="1.3483%" height="15" fill="rgb(213,181,19)"/><text x="0.3249%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (18 samples, 1.35%)</title><rect x="0.0749%" y="388" width="1.3483%" height="15" fill="rgb(254,191,54)"/><text x="0.3249%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (18 samples, 1.35%)</title><rect x="0.0749%" y="404" width="1.3483%" height="15" fill="rgb(241,83,37)"/><text x="0.3249%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 1.35%)</title><rect x="0.0749%" y="420" width="1.3483%" height="15" fill="rgb(233,36,39)"/><text x="0.3249%" y="430.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:48) (14 samples, 1.05%)</title><rect x="1.9476%" y="292" width="1.0487%" height="15" fill="rgb(226,3,54)"/><text x="2.1976%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (14 samples, 1.05%)</title><rect x="1.9476%" y="308" width="1.0487%" height="15" fill="rgb(245,192,40)"/><text x="2.1976%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (14 samples, 1.05%)</title><rect x="1.9476%" y="324" width="1.0487%" height="15" fill="rgb(238,167,29)"/><text x="2.1976%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (14 samples, 1.05%)</title><rect x="1.9476%" y="340" width="1.0487%" height="15" fill="rgb(232,182,51)"/><text x="2.1976%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (14 samples, 1.05%)</title><rect x="1.9476%" y="356" width="1.0487%" height="15" fill="rgb(231,60,39)"/><text x="2.1976%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (14 samples, 1.05%)</title><rect x="1.9476%" y="372" width="1.0487%" height="15" fill="rgb(208,69,12)"/><text x="2.1976%" y="382.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:50) (15 samples, 1.12%)</title><rect x="2.9963%" y="292" width="1.1236%" height="15" fill="rgb(235,93,37)"/><text x="3.2463%" y="302.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (15 samples, 1.12%)</title><rect x="2.9963%" y="308" width="1.1236%" height="15" fill="rgb(213,116,39)"/><text x="3.2463%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.12%)</title><rect x="2.9963%" y="324" width="1.1236%" height="15" fill="rgb(222,207,29)"/><text x="3.2463%" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (15 samples, 1.12%)</title><rect x="2.9963%" y="340" width="1.1236%" height="15" fill="rgb(206,96,30)"/><text x="3.2463%" y="350.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (15 samples, 1.12%)</title><rect x="2.9963%" y="356" width="1.1236%" height="15" fill="rgb(218,138,4)"/><text x="3.2463%" y="366.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (15 samples, 1.12%)</title><rect x="2.9963%" y="372" width="1.1236%" height="15" fill="rgb(250,191,14)"/><text x="3.2463%" y="382.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (15 samples, 1.12%)</title><rect x="2.9963%" y="388" width="1.1236%" height="15" fill="rgb(239,60,40)"/><text x="3.2463%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.12%)</title><rect x="2.9963%" y="404" width="1.1236%" height="15" fill="rgb(206,27,48)"/><text x="3.2463%" y="414.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/pywrap_tensorflow.py:58) (15 samples, 1.12%)</title><rect x="2.9963%" y="420" width="1.1236%" height="15" fill="rgb(225,35,8)"/><text x="3.2463%" y="430.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (15 samples, 1.12%)</title><rect x="2.9963%" y="436" width="1.1236%" height="15" fill="rgb(250,213,24)"/><text x="3.2463%" y="446.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (15 samples, 1.12%)</title><rect x="2.9963%" y="452" width="1.1236%" height="15" fill="rgb(247,123,22)"/><text x="3.2463%" y="462.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (15 samples, 1.12%)</title><rect x="2.9963%" y="468" width="1.1236%" height="15" fill="rgb(231,138,38)"/><text x="3.2463%" y="478.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (15 samples, 1.12%)</title><rect x="2.9963%" y="484" width="1.1236%" height="15" fill="rgb(231,145,46)"/><text x="3.2463%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.12%)</title><rect x="2.9963%" y="500" width="1.1236%" height="15" fill="rgb(251,118,11)"/><text x="3.2463%" y="510.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/pywrap_tensorflow_internal.py:28) (15 samples, 1.12%)</title><rect x="2.9963%" y="516" width="1.1236%" height="15" fill="rgb(217,147,25)"/><text x="3.2463%" y="526.50"></text></g><g><title>swig_import_helper (tensorflow/python/pywrap_tensorflow_internal.py:24) (15 samples, 1.12%)</title><rect x="2.9963%" y="532" width="1.1236%" height="15" fill="rgb(247,81,37)"/><text x="3.2463%" y="542.50"></text></g><g><title>load_module (imp.py:242) (15 samples, 1.12%)</title><rect x="2.9963%" y="548" width="1.1236%" height="15" fill="rgb(209,12,38)"/><text x="3.2463%" y="558.50"></text></g><g><title>load_dynamic (imp.py:342) (15 samples, 1.12%)</title><rect x="2.9963%" y="564" width="1.1236%" height="15" fill="rgb(227,1,9)"/><text x="3.2463%" y="574.50"></text></g><g><title>_load (&lt;frozen importlib._bootstrap&gt;:702) (15 samples, 1.12%)</title><rect x="2.9963%" y="580" width="1.1236%" height="15" fill="rgb(248,47,43)"/><text x="3.2463%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:657) (15 samples, 1.12%)</title><rect x="2.9963%" y="596" width="1.1236%" height="15" fill="rgb(221,10,30)"/><text x="3.2463%" y="606.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:556) (15 samples, 1.12%)</title><rect x="2.9963%" y="612" width="1.1236%" height="15" fill="rgb(210,229,1)"/><text x="3.2463%" y="622.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1101) (15 samples, 1.12%)</title><rect x="2.9963%" y="628" width="1.1236%" height="15" fill="rgb(222,148,37)"/><text x="3.2463%" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.12%)</title><rect x="2.9963%" y="644" width="1.1236%" height="15" fill="rgb(234,67,33)"/><text x="3.2463%" y="654.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:53) (21 samples, 1.57%)</title><rect x="4.1199%" y="292" width="1.5730%" height="15" fill="rgb(247,98,35)"/><text x="4.3699%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (21 samples, 1.57%)</title><rect x="4.1199%" y="308" width="1.5730%" height="15" fill="rgb(247,138,52)"/><text x="4.3699%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (21 samples, 1.57%)</title><rect x="4.1199%" y="324" width="1.5730%" height="15" fill="rgb(213,79,30)"/><text x="4.3699%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (21 samples, 1.57%)</title><rect x="4.1199%" y="340" width="1.5730%" height="15" fill="rgb(246,177,23)"/><text x="4.3699%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (21 samples, 1.57%)</title><rect x="4.1199%" y="356" width="1.5730%" height="15" fill="rgb(230,62,27)"/><text x="4.3699%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 1.57%)</title><rect x="4.1199%" y="372" width="1.5730%" height="15" fill="rgb(216,154,8)"/><text x="4.3699%" y="382.50"></text></g><g><title>&lt;module&gt; (tensorflow/core/framework/graph_pb2.py:7) (20 samples, 1.50%)</title><rect x="4.1948%" y="388" width="1.4981%" height="15" fill="rgb(244,35,45)"/><text x="4.4448%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (20 samples, 1.50%)</title><rect x="4.1948%" y="404" width="1.4981%" height="15" fill="rgb(251,115,12)"/><text x="4.4448%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (20 samples, 1.50%)</title><rect x="4.1948%" y="420" width="1.4981%" height="15" fill="rgb(240,54,50)"/><text x="4.4448%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (20 samples, 1.50%)</title><rect x="4.1948%" y="436" width="1.4981%" height="15" fill="rgb(233,84,52)"/><text x="4.4448%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (20 samples, 1.50%)</title><rect x="4.1948%" y="452" width="1.4981%" height="15" fill="rgb(207,117,47)"/><text x="4.4448%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (20 samples, 1.50%)</title><rect x="4.1948%" y="468" width="1.4981%" height="15" fill="rgb(249,43,39)"/><text x="4.4448%" y="478.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (20 samples, 1.50%)</title><rect x="4.1948%" y="484" width="1.4981%" height="15" fill="rgb(209,38,44)"/><text x="4.4448%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (20 samples, 1.50%)</title><rect x="4.1948%" y="500" width="1.4981%" height="15" fill="rgb(236,212,23)"/><text x="4.4448%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (20 samples, 1.50%)</title><rect x="4.1948%" y="516" width="1.4981%" height="15" fill="rgb(242,79,21)"/><text x="4.4448%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (20 samples, 1.50%)</title><rect x="4.1948%" y="532" width="1.4981%" height="15" fill="rgb(211,96,35)"/><text x="4.4448%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (19 samples, 1.42%)</title><rect x="4.2697%" y="548" width="1.4232%" height="15" fill="rgb(253,215,40)"/><text x="4.5197%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 1.42%)</title><rect x="4.2697%" y="564" width="1.4232%" height="15" fill="rgb(211,81,21)"/><text x="4.5197%" y="574.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:64) (17 samples, 1.27%)</title><rect x="5.7678%" y="292" width="1.2734%" height="15" fill="rgb(208,190,38)"/><text x="6.0178%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (17 samples, 1.27%)</title><rect x="5.7678%" y="308" width="1.2734%" height="15" fill="rgb(235,213,38)"/><text x="6.0178%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (17 samples, 1.27%)</title><rect x="5.7678%" y="324" width="1.2734%" height="15" fill="rgb(237,122,38)"/><text x="6.0178%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (17 samples, 1.27%)</title><rect x="5.7678%" y="340" width="1.2734%" height="15" fill="rgb(244,218,35)"/><text x="6.0178%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (17 samples, 1.27%)</title><rect x="5.7678%" y="356" width="1.2734%" height="15" fill="rgb(240,68,47)"/><text x="6.0178%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="5.7678%" y="372" width="1.2734%" height="15" fill="rgb(210,16,53)"/><text x="6.0178%" y="382.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:74) (17 samples, 1.27%)</title><rect x="7.0412%" y="292" width="1.2734%" height="15" fill="rgb(235,124,12)"/><text x="7.2912%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (17 samples, 1.27%)</title><rect x="7.0412%" y="308" width="1.2734%" height="15" fill="rgb(224,169,11)"/><text x="7.2912%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (17 samples, 1.27%)</title><rect x="7.0412%" y="324" width="1.2734%" height="15" fill="rgb(250,166,2)"/><text x="7.2912%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (17 samples, 1.27%)</title><rect x="7.0412%" y="340" width="1.2734%" height="15" fill="rgb(242,216,29)"/><text x="7.2912%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (17 samples, 1.27%)</title><rect x="7.0412%" y="356" width="1.2734%" height="15" fill="rgb(230,116,27)"/><text x="7.2912%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="7.0412%" y="372" width="1.2734%" height="15" fill="rgb(228,99,48)"/><text x="7.2912%" y="382.50"></text></g><g><title>&lt;module&gt; (tensorflow/python/keras/models.py:27) (16 samples, 1.20%)</title><rect x="8.9139%" y="548" width="1.1985%" height="15" fill="rgb(253,11,6)"/><text x="9.1639%" y="558.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (16 samples, 1.20%)</title><rect x="8.9139%" y="564" width="1.1985%" height="15" fill="rgb(247,143,39)"/><text x="9.1639%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 1.20%)</title><rect x="8.9139%" y="580" width="1.1985%" height="15" fill="rgb(236,97,10)"/><text x="9.1639%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (16 samples, 1.20%)</title><rect x="8.9139%" y="596" width="1.1985%" height="15" fill="rgb(233,208,19)"/><text x="9.1639%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (16 samples, 1.20%)</title><rect x="8.9139%" y="612" width="1.1985%" height="15" fill="rgb(216,164,2)"/><text x="9.1639%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (16 samples, 1.20%)</title><rect x="8.9139%" y="628" width="1.1985%" height="15" fill="rgb(220,129,5)"/><text x="9.1639%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (16 samples, 1.20%)</title><rect x="8.9139%" y="644" width="1.1985%" height="15" fill="rgb(242,17,10)"/><text x="9.1639%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 1.20%)</title><rect x="8.9139%" y="660" width="1.1985%" height="15" fill="rgb(242,107,0)"/><text x="9.1639%" y="670.50"></text></g><g><title>&lt;module&gt; (tensorflow/__init__.py:41) (117 samples, 8.76%)</title><rect x="1.4232%" y="148" width="8.7640%" height="15" fill="rgb(251,28,31)"/><text x="1.6732%" y="158.50">&lt;module&gt; (te..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (117 samples, 8.76%)</title><rect x="1.4232%" y="164" width="8.7640%" height="15" fill="rgb(233,223,10)"/><text x="1.6732%" y="174.50">_find_and_lo..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (117 samples, 8.76%)</title><rect x="1.4232%" y="180" width="8.7640%" height="15" fill="rgb(215,21,27)"/><text x="1.6732%" y="190.50">_find_and_lo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (117 samples, 8.76%)</title><rect x="1.4232%" y="196" width="8.7640%" height="15" fill="rgb(232,23,21)"/><text x="1.6732%" y="206.50">_call_with_f..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (117 samples, 8.76%)</title><rect x="1.4232%" y="212" width="8.7640%" height="15" fill="rgb(244,5,23)"/><text x="1.6732%" y="222.50">_find_and_lo..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (117 samples, 8.76%)</title><rect x="1.4232%" y="228" width="8.7640%" height="15" fill="rgb(226,81,46)"/><text x="1.6732%" y="238.50">_find_and_lo..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (117 samples, 8.76%)</title><rect x="1.4232%" y="244" width="8.7640%" height="15" fill="rgb(247,70,30)"/><text x="1.6732%" y="254.50">_load_unlock..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (117 samples, 8.76%)</title><rect x="1.4232%" y="260" width="8.7640%" height="15" fill="rgb(212,68,19)"/><text x="1.6732%" y="270.50">exec_module ..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (117 samples, 8.76%)</title><rect x="1.4232%" y="276" width="8.7640%" height="15" fill="rgb(240,187,13)"/><text x="1.6732%" y="286.50">_call_with_f..</text></g><g><title>&lt;module&gt; (tensorflow/python/__init__.py:84) (25 samples, 1.87%)</title><rect x="8.3146%" y="292" width="1.8727%" height="15" fill="rgb(223,113,26)"/><text x="8.5646%" y="302.50">&lt;..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (25 samples, 1.87%)</title><rect x="8.3146%" y="308" width="1.8727%" height="15" fill="rgb(206,192,2)"/><text x="8.5646%" y="318.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 1.87%)</title><rect x="8.3146%" y="324" width="1.8727%" height="15" fill="rgb(241,108,4)"/><text x="8.5646%" y="334.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (25 samples, 1.87%)</title><rect x="8.3146%" y="340" width="1.8727%" height="15" fill="rgb(247,173,49)"/><text x="8.5646%" y="350.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (25 samples, 1.87%)</title><rect x="8.3146%" y="356" width="1.8727%" height="15" fill="rgb(224,114,35)"/><text x="8.5646%" y="366.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (25 samples, 1.87%)</title><rect x="8.3146%" y="372" width="1.8727%" height="15" fill="rgb(245,159,27)"/><text x="8.5646%" y="382.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (25 samples, 1.87%)</title><rect x="8.3146%" y="388" width="1.8727%" height="15" fill="rgb(245,172,44)"/><text x="8.5646%" y="398.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 1.87%)</title><rect x="8.3146%" y="404" width="1.8727%" height="15" fill="rgb(236,23,11)"/><text x="8.5646%" y="414.50">_..</text></g><g><title>&lt;module&gt; (tensorflow/python/keras/__init__.py:27) (25 samples, 1.87%)</title><rect x="8.3146%" y="420" width="1.8727%" height="15" fill="rgb(205,117,38)"/><text x="8.5646%" y="430.50">&lt;..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (25 samples, 1.87%)</title><rect x="8.3146%" y="436" width="1.8727%" height="15" fill="rgb(237,72,25)"/><text x="8.5646%" y="446.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 1.87%)</title><rect x="8.3146%" y="452" width="1.8727%" height="15" fill="rgb(244,70,9)"/><text x="8.5646%" y="462.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (25 samples, 1.87%)</title><rect x="8.3146%" y="468" width="1.8727%" height="15" fill="rgb(217,125,39)"/><text x="8.5646%" y="478.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (25 samples, 1.87%)</title><rect x="8.3146%" y="484" width="1.8727%" height="15" fill="rgb(235,36,10)"/><text x="8.5646%" y="494.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (25 samples, 1.87%)</title><rect x="8.3146%" y="500" width="1.8727%" height="15" fill="rgb(251,123,47)"/><text x="8.5646%" y="510.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (25 samples, 1.87%)</title><rect x="8.3146%" y="516" width="1.8727%" height="15" fill="rgb(221,13,13)"/><text x="8.5646%" y="526.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 1.87%)</title><rect x="8.3146%" y="532" width="1.8727%" height="15" fill="rgb(238,131,9)"/><text x="8.5646%" y="542.50">_..</text></g><g><title>&lt;module&gt; (tensorflow/__init__.py:48) (17 samples, 1.27%)</title><rect x="10.2622%" y="148" width="1.2734%" height="15" fill="rgb(211,50,8)"/><text x="10.5122%" y="158.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (17 samples, 1.27%)</title><rect x="10.2622%" y="164" width="1.2734%" height="15" fill="rgb(245,182,24)"/><text x="10.5122%" y="174.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="180" width="1.2734%" height="15" fill="rgb(242,14,37)"/><text x="10.5122%" y="190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (17 samples, 1.27%)</title><rect x="10.2622%" y="196" width="1.2734%" height="15" fill="rgb(246,228,12)"/><text x="10.5122%" y="206.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (17 samples, 1.27%)</title><rect x="10.2622%" y="212" width="1.2734%" height="15" fill="rgb(213,55,15)"/><text x="10.5122%" y="222.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (17 samples, 1.27%)</title><rect x="10.2622%" y="228" width="1.2734%" height="15" fill="rgb(209,9,3)"/><text x="10.5122%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (17 samples, 1.27%)</title><rect x="10.2622%" y="244" width="1.2734%" height="15" fill="rgb(230,59,30)"/><text x="10.5122%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="260" width="1.2734%" height="15" fill="rgb(209,121,21)"/><text x="10.5122%" y="270.50"></text></g><g><title>&lt;module&gt; (tensorflow/_api/v2/compat/__init__.py:39) (17 samples, 1.27%)</title><rect x="10.2622%" y="276" width="1.2734%" height="15" fill="rgb(220,109,13)"/><text x="10.5122%" y="286.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (17 samples, 1.27%)</title><rect x="10.2622%" y="292" width="1.2734%" height="15" fill="rgb(232,18,1)"/><text x="10.5122%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="308" width="1.2734%" height="15" fill="rgb(215,41,42)"/><text x="10.5122%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (17 samples, 1.27%)</title><rect x="10.2622%" y="324" width="1.2734%" height="15" fill="rgb(224,123,36)"/><text x="10.5122%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (17 samples, 1.27%)</title><rect x="10.2622%" y="340" width="1.2734%" height="15" fill="rgb(240,125,3)"/><text x="10.5122%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (17 samples, 1.27%)</title><rect x="10.2622%" y="356" width="1.2734%" height="15" fill="rgb(205,98,50)"/><text x="10.5122%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (17 samples, 1.27%)</title><rect x="10.2622%" y="372" width="1.2734%" height="15" fill="rgb(205,185,37)"/><text x="10.5122%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="388" width="1.2734%" height="15" fill="rgb(238,207,15)"/><text x="10.5122%" y="398.50"></text></g><g><title>&lt;module&gt; (tensorflow/_api/v2/compat/v1/__init__.py:34) (17 samples, 1.27%)</title><rect x="10.2622%" y="404" width="1.2734%" height="15" fill="rgb(213,199,42)"/><text x="10.5122%" y="414.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (17 samples, 1.27%)</title><rect x="10.2622%" y="420" width="1.2734%" height="15" fill="rgb(235,201,11)"/><text x="10.5122%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="436" width="1.2734%" height="15" fill="rgb(207,46,11)"/><text x="10.5122%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (17 samples, 1.27%)</title><rect x="10.2622%" y="452" width="1.2734%" height="15" fill="rgb(241,35,35)"/><text x="10.5122%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (17 samples, 1.27%)</title><rect x="10.2622%" y="468" width="1.2734%" height="15" fill="rgb(243,32,47)"/><text x="10.5122%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (17 samples, 1.27%)</title><rect x="10.2622%" y="484" width="1.2734%" height="15" fill="rgb(247,202,23)"/><text x="10.5122%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (17 samples, 1.27%)</title><rect x="10.2622%" y="500" width="1.2734%" height="15" fill="rgb(219,102,11)"/><text x="10.5122%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.27%)</title><rect x="10.2622%" y="516" width="1.2734%" height="15" fill="rgb(243,110,44)"/><text x="10.5122%" y="526.50"></text></g><g><title>&lt;module&gt; (test.py:2) (136 samples, 10.19%)</title><rect x="1.4232%" y="52" width="10.1873%" height="15" fill="rgb(222,74,54)"/><text x="1.6732%" y="62.50">&lt;module&gt; (test...</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (136 samples, 10.19%)</title><rect x="1.4232%" y="68" width="10.1873%" height="15" fill="rgb(216,99,12)"/><text x="1.6732%" y="78.50">_find_and_load ..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (136 samples, 10.19%)</title><rect x="1.4232%" y="84" width="10.1873%" height="15" fill="rgb(226,22,26)"/><text x="1.6732%" y="94.50">_find_and_load_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (136 samples, 10.19%)</title><rect x="1.4232%" y="100" width="10.1873%" height="15" fill="rgb(217,163,10)"/><text x="1.6732%" y="110.50">_load_unlocked ..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (136 samples, 10.19%)</title><rect x="1.4232%" y="116" width="10.1873%" height="15" fill="rgb(213,25,53)"/><text x="1.6732%" y="126.50">exec_module (&lt;f..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (136 samples, 10.19%)</title><rect x="1.4232%" y="132" width="10.1873%" height="15" fill="rgb(252,105,26)"/><text x="1.6732%" y="142.50">_call_with_fram..</text></g><g><title>_reduction_a_cell (tensorflow/python/keras/applications/nasnet.py:725) (15 samples, 1.12%)</title><rect x="13.4082%" y="100" width="1.1236%" height="15" fill="rgb(220,39,43)"/><text x="13.6582%" y="110.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:225) (50 samples, 3.75%)</title><rect x="12.4345%" y="84" width="3.7453%" height="15" fill="rgb(229,68,48)"/><text x="12.6845%" y="94.50">NASN..</text></g><g><title>_reduction_a_cell (tensorflow/python/keras/applications/nasnet.py:697) (18 samples, 1.35%)</title><rect x="16.1798%" y="100" width="1.3483%" height="15" fill="rgb(252,8,32)"/><text x="16.4298%" y="110.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:227) (68 samples, 5.09%)</title><rect x="16.1798%" y="84" width="5.0936%" height="15" fill="rgb(223,20,43)"/><text x="16.4298%" y="94.50">NASNet..</text></g><g><title>_reduction_a_cell (tensorflow/python/keras/applications/nasnet.py:767) (17 samples, 1.27%)</title><rect x="20.0000%" y="100" width="1.2734%" height="15" fill="rgb(229,81,49)"/><text x="20.2500%" y="110.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:637) (35 samples, 2.62%)</title><rect x="22.9213%" y="100" width="2.6217%" height="15" fill="rgb(236,28,36)"/><text x="23.1713%" y="110.50">_n..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:509) (14 samples, 1.05%)</title><rect x="24.4944%" y="116" width="1.0487%" height="15" fill="rgb(249,185,26)"/><text x="24.7444%" y="126.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:639) (32 samples, 2.40%)</title><rect x="25.5431%" y="100" width="2.3970%" height="15" fill="rgb(249,174,33)"/><text x="25.7931%" y="110.50">_n..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:494) (14 samples, 1.05%)</title><rect x="28.0899%" y="116" width="1.0487%" height="15" fill="rgb(233,201,37)"/><text x="28.3399%" y="126.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:644) (32 samples, 2.40%)</title><rect x="27.9401%" y="100" width="2.3970%" height="15" fill="rgb(221,78,26)"/><text x="28.1901%" y="110.50">_n..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:646) (27 samples, 2.02%)</title><rect x="30.3371%" y="100" width="2.0225%" height="15" fill="rgb(250,127,30)"/><text x="30.5871%" y="110.50">_..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:509) (14 samples, 1.05%)</title><rect x="31.3109%" y="116" width="1.0487%" height="15" fill="rgb(230,49,44)"/><text x="31.5609%" y="126.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:231) (180 samples, 13.48%)</title><rect x="21.2734%" y="84" width="13.4831%" height="15" fill="rgb(229,67,23)"/><text x="21.5234%" y="94.50">NASNet (tensorflow/p..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:672) (25 samples, 1.87%)</title><rect x="32.8839%" y="100" width="1.8727%" height="15" fill="rgb(249,83,47)"/><text x="33.1339%" y="110.50">_..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:509) (15 samples, 1.12%)</title><rect x="33.6330%" y="116" width="1.1236%" height="15" fill="rgb(215,43,3)"/><text x="33.8830%" y="126.50"></text></g><g><title>_reduction_a_cell (tensorflow/python/keras/applications/nasnet.py:725) (17 samples, 1.27%)</title><rect x="35.4307%" y="100" width="1.2734%" height="15" fill="rgb(238,154,13)"/><text x="35.6807%" y="110.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:233) (46 samples, 3.45%)</title><rect x="34.7566%" y="84" width="3.4457%" height="15" fill="rgb(219,56,2)"/><text x="35.0066%" y="94.50">NAS..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:618) (22 samples, 1.65%)</title><rect x="38.2022%" y="100" width="1.6479%" height="15" fill="rgb(233,0,4)"/><text x="38.4522%" y="110.50"></text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:494) (14 samples, 1.05%)</title><rect x="41.4981%" y="116" width="1.0487%" height="15" fill="rgb(235,30,7)"/><text x="41.7481%" y="126.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:637) (31 samples, 2.32%)</title><rect x="41.0487%" y="100" width="2.3221%" height="15" fill="rgb(250,79,13)"/><text x="41.2987%" y="110.50">_..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:639) (29 samples, 2.17%)</title><rect x="43.3708%" y="100" width="2.1723%" height="15" fill="rgb(211,146,34)"/><text x="43.6208%" y="110.50">_..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:644) (27 samples, 2.02%)</title><rect x="45.5431%" y="100" width="2.0225%" height="15" fill="rgb(228,22,38)"/><text x="45.7931%" y="110.50">_..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:509) (14 samples, 1.05%)</title><rect x="46.5169%" y="116" width="1.0487%" height="15" fill="rgb(235,168,5)"/><text x="46.7669%" y="126.50"></text></g><g><title>__call__ (tensorflow/python/keras/engine/base_layer.py:922) (14 samples, 1.05%)</title><rect x="46.5169%" y="132" width="1.0487%" height="15" fill="rgb(221,155,16)"/><text x="46.7669%" y="142.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:646) (22 samples, 1.65%)</title><rect x="47.5655%" y="100" width="1.6479%" height="15" fill="rgb(215,215,53)"/><text x="47.8155%" y="110.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:672) (21 samples, 1.57%)</title><rect x="49.5131%" y="100" width="1.5730%" height="15" fill="rgb(223,4,10)"/><text x="49.7631%" y="110.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:239) (174 samples, 13.03%)</title><rect x="38.2022%" y="84" width="13.0337%" height="15" fill="rgb(234,103,6)"/><text x="38.4522%" y="94.50">NASNet (tensorflow/p..</text></g><g><title>_reduction_a_cell (tensorflow/python/keras/applications/nasnet.py:751) (15 samples, 1.12%)</title><rect x="53.8577%" y="100" width="1.1236%" height="15" fill="rgb(227,97,0)"/><text x="54.1077%" y="110.50"></text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:242) (57 samples, 4.27%)</title><rect x="51.2360%" y="84" width="4.2697%" height="15" fill="rgb(234,150,53)"/><text x="51.4860%" y="94.50">NASNe..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:637) (24 samples, 1.80%)</title><rect x="57.5281%" y="100" width="1.7978%" height="15" fill="rgb(228,201,54)"/><text x="57.7781%" y="110.50">_..</text></g><g><title>__call__ (tensorflow/python/keras/engine/base_layer.py:922) (14 samples, 1.05%)</title><rect x="59.6255%" y="132" width="1.0487%" height="15" fill="rgb(222,22,37)"/><text x="59.8755%" y="142.50"></text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:494) (16 samples, 1.20%)</title><rect x="59.5506%" y="116" width="1.1985%" height="15" fill="rgb(237,53,32)"/><text x="59.8006%" y="126.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:639) (39 samples, 2.92%)</title><rect x="59.3258%" y="100" width="2.9213%" height="15" fill="rgb(233,25,53)"/><text x="59.5758%" y="110.50">_n..</text></g><g><title>_separable_conv_block (tensorflow/python/keras/applications/nasnet.py:509) (14 samples, 1.05%)</title><rect x="61.1985%" y="116" width="1.0487%" height="15" fill="rgb(210,40,34)"/><text x="61.4485%" y="126.50"></text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:644) (31 samples, 2.32%)</title><rect x="62.2472%" y="100" width="2.3221%" height="15" fill="rgb(241,220,44)"/><text x="62.4972%" y="110.50">_..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:646) (25 samples, 1.87%)</title><rect x="64.5693%" y="100" width="1.8727%" height="15" fill="rgb(235,28,35)"/><text x="64.8193%" y="110.50">_..</text></g><g><title>_normal_a_cell (tensorflow/python/keras/applications/nasnet.py:672) (24 samples, 1.80%)</title><rect x="66.5169%" y="100" width="1.7978%" height="15" fill="rgb(210,56,17)"/><text x="66.7669%" y="110.50">_..</text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:251) (174 samples, 13.03%)</title><rect x="55.5056%" y="84" width="13.0337%" height="15" fill="rgb(224,130,29)"/><text x="55.7556%" y="94.50">NASNet (tensorflow/p..</text></g><g><title>load_weights_from_hdf5_group (tensorflow/python/keras/saving/hdf5_format.py:693) (40 samples, 3.00%)</title><rect x="70.2622%" y="132" width="2.9963%" height="15" fill="rgb(235,212,8)"/><text x="70.5122%" y="142.50">loa..</text></g><g><title>&lt;listcomp&gt; (tensorflow/python/keras/saving/hdf5_format.py:693) (40 samples, 3.00%)</title><rect x="70.2622%" y="148" width="2.9963%" height="15" fill="rgb(223,33,50)"/><text x="70.5122%" y="158.50">&lt;li..</text></g><g><title>asarray (numpy/core/_asarray.py:85) (24 samples, 1.80%)</title><rect x="71.4607%" y="164" width="1.7978%" height="15" fill="rgb(219,149,13)"/><text x="71.7107%" y="174.50">a..</text></g><g><title>&lt;module&gt; (test.py:67) (834 samples, 62.47%)</title><rect x="11.8352%" y="52" width="62.4719%" height="15" fill="rgb(250,156,29)"/><text x="12.0852%" y="62.50">&lt;module&gt; (test.py:67)</text></g><g><title>NASNetMobile (tensorflow/python/keras/applications/nasnet.py:374) (834 samples, 62.47%)</title><rect x="11.8352%" y="68" width="62.4719%" height="15" fill="rgb(216,193,19)"/><text x="12.0852%" y="78.50">NASNetMobile (tensorflow/python/keras/applications/nasnet.py:374)</text></g><g><title>NASNet (tensorflow/python/keras/applications/nasnet.py:294) (70 samples, 5.24%)</title><rect x="69.0637%" y="84" width="5.2434%" height="15" fill="rgb(216,135,14)"/><text x="69.3137%" y="94.50">NASNet..</text></g><g><title>load_weights (tensorflow/python/keras/engine/training.py:250) (70 samples, 5.24%)</title><rect x="69.0637%" y="100" width="5.2434%" height="15" fill="rgb(241,47,5)"/><text x="69.3137%" y="110.50">load_w..</text></g><g><title>load_weights (tensorflow/python/keras/engine/network.py:1266) (70 samples, 5.24%)</title><rect x="69.0637%" y="116" width="5.2434%" height="15" fill="rgb(233,42,35)"/><text x="69.3137%" y="126.50">load_w..</text></g><g><title>predict (tensorflow/python/keras/engine/training.py:1243) (14 samples, 1.05%)</title><rect x="74.7566%" y="100" width="1.0487%" height="15" fill="rgb(231,13,6)"/><text x="75.0066%" y="110.50"></text></g><g><title>__init__ (tensorflow/python/keras/engine/data_adapter.py:1100) (14 samples, 1.05%)</title><rect x="74.7566%" y="116" width="1.0487%" height="15" fill="rgb(207,181,40)"/><text x="75.0066%" y="126.50"></text></g><g><title>func_graph_from_py_func (tensorflow/python/framework/func_graph.py:1022) (16 samples, 1.20%)</title><rect x="76.4794%" y="212" width="1.1985%" height="15" fill="rgb(254,173,49)"/><text x="76.7294%" y="222.50"></text></g><g><title>separable_conv2d (tensorflow/python/ops/nn_impl.py:926) (15 samples, 1.12%)</title><rect x="80.2247%" y="516" width="1.1236%" height="15" fill="rgb(221,1,38)"/><text x="80.4747%" y="526.50"></text></g><g><title>convert_to_tensor (tensorflow/python/framework/ops.py:1341) (15 samples, 1.12%)</title><rect x="80.2247%" y="532" width="1.1236%" height="15" fill="rgb(206,124,46)"/><text x="80.4747%" y="542.50"></text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1825) (15 samples, 1.12%)</title><rect x="80.2247%" y="548" width="1.1236%" height="15" fill="rgb(249,21,11)"/><text x="80.4747%" y="558.50"></text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1242) (15 samples, 1.12%)</title><rect x="80.2247%" y="564" width="1.1236%" height="15" fill="rgb(222,201,40)"/><text x="80.4747%" y="574.50"></text></g><g><title>value (tensorflow/python/ops/resource_variable_ops.py:550) (15 samples, 1.12%)</title><rect x="80.2247%" y="580" width="1.1236%" height="15" fill="rgb(235,61,29)"/><text x="80.4747%" y="590.50"></text></g><g><title>_read_variable_op (tensorflow/python/ops/resource_variable_ops.py:645) (15 samples, 1.12%)</title><rect x="80.2247%" y="596" width="1.1236%" height="15" fill="rgb(219,207,3)"/><text x="80.4747%" y="606.50"></text></g><g><title>read_and_set_handle (tensorflow/python/ops/resource_variable_ops.py:635) (15 samples, 1.12%)</title><rect x="80.2247%" y="612" width="1.1236%" height="15" fill="rgb(222,56,46)"/><text x="80.4747%" y="622.50"></text></g><g><title>read_variable_op (tensorflow/python/ops/gen_resource_variable_ops.py:482) (15 samples, 1.12%)</title><rect x="80.2247%" y="628" width="1.1236%" height="15" fill="rgb(239,76,54)"/><text x="80.4747%" y="638.50"></text></g><g><title>__enter__ (tensorflow/python/framework/ops.py:6280) (17 samples, 1.27%)</title><rect x="82.3970%" y="628" width="1.2734%" height="15" fill="rgb(231,124,27)"/><text x="82.6470%" y="638.50"></text></g><g><title>get_default_graph (tensorflow/python/framework/ops.py:5816) (17 samples, 1.27%)</title><rect x="82.3970%" y="644" width="1.2734%" height="15" fill="rgb(249,195,6)"/><text x="82.6470%" y="654.50"></text></g><g><title>get_default (tensorflow/python/framework/ops.py:5373) (17 samples, 1.27%)</title><rect x="82.3970%" y="660" width="1.2734%" height="15" fill="rgb(237,174,47)"/><text x="82.6470%" y="670.50"></text></g><g><title>_apply_op_helper (tensorflow/python/framework/op_def_library.py:353) (19 samples, 1.42%)</title><rect x="82.3221%" y="612" width="1.4232%" height="15" fill="rgb(206,201,31)"/><text x="82.5721%" y="622.50"></text></g><g><title>separable_conv2d (tensorflow/python/ops/nn_impl.py:949) (38 samples, 2.85%)</title><rect x="81.4232%" y="516" width="2.8464%" height="15" fill="rgb(231,57,52)"/><text x="81.6732%" y="526.50">se..</text></g><g><title>with_space_to_batch (tensorflow/python/ops/nn_ops.py:482) (27 samples, 2.02%)</title><rect x="82.2472%" y="532" width="2.0225%" height="15" fill="rgb(248,177,22)"/><text x="82.4972%" y="542.50">w..</text></g><g><title>__call__ (tensorflow/python/ops/nn_ops.py:638) (27 samples, 2.02%)</title><rect x="82.2472%" y="548" width="2.0225%" height="15" fill="rgb(215,211,37)"/><text x="82.4972%" y="558.50">_..</text></g><g><title>&lt;lambda&gt; (tensorflow/python/ops/nn_ops.py:472) (27 samples, 2.02%)</title><rect x="82.2472%" y="564" width="2.0225%" height="15" fill="rgb(241,128,51)"/><text x="82.4972%" y="574.50">&lt;..</text></g><g><title>op (tensorflow/python/ops/nn_impl.py:941) (27 samples, 2.02%)</title><rect x="82.2472%" y="580" width="2.0225%" height="15" fill="rgb(227,165,31)"/><text x="82.4972%" y="590.50">o..</text></g><g><title>depthwise_conv2d_native (tensorflow/python/ops/gen_nn_ops.py:2205) (26 samples, 1.95%)</title><rect x="82.3221%" y="596" width="1.9476%" height="15" fill="rgb(228,167,24)"/><text x="82.5721%" y="606.50">d..</text></g><g><title>call (tensorflow/python/keras/layers/convolutional.py:1870) (74 samples, 5.54%)</title><rect x="79.4757%" y="500" width="5.5431%" height="15" fill="rgb(228,143,12)"/><text x="79.7257%" y="510.50">call (t..</text></g><g><title>fused_batch_norm (tensorflow/python/ops/nn_impl.py:1509) (14 samples, 1.05%)</title><rect x="86.2172%" y="580" width="1.0487%" height="15" fill="rgb(249,149,8)"/><text x="86.4672%" y="590.50"></text></g><g><title>convert_to_tensor (tensorflow/python/framework/ops.py:1341) (14 samples, 1.05%)</title><rect x="86.2172%" y="596" width="1.0487%" height="15" fill="rgb(243,35,44)"/><text x="86.4672%" y="606.50"></text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1825) (14 samples, 1.05%)</title><rect x="86.2172%" y="612" width="1.0487%" height="15" fill="rgb(246,89,9)"/><text x="86.4672%" y="622.50"></text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1242) (14 samples, 1.05%)</title><rect x="86.2172%" y="628" width="1.0487%" height="15" fill="rgb(233,213,13)"/><text x="86.4672%" y="638.50"></text></g><g><title>value (tensorflow/python/ops/resource_variable_ops.py:550) (14 samples, 1.05%)</title><rect x="86.2172%" y="644" width="1.0487%" height="15" fill="rgb(233,141,41)"/><text x="86.4672%" y="654.50"></text></g><g><title>_read_variable_op (tensorflow/python/ops/resource_variable_ops.py:645) (14 samples, 1.05%)</title><rect x="86.2172%" y="660" width="1.0487%" height="15" fill="rgb(239,167,4)"/><text x="86.4672%" y="670.50"></text></g><g><title>read_and_set_handle (tensorflow/python/ops/resource_variable_ops.py:635) (14 samples, 1.05%)</title><rect x="86.2172%" y="676" width="1.0487%" height="15" fill="rgb(209,217,16)"/><text x="86.4672%" y="686.50"></text></g><g><title>read_variable_op (tensorflow/python/ops/gen_resource_variable_ops.py:482) (14 samples, 1.05%)</title><rect x="86.2172%" y="692" width="1.0487%" height="15" fill="rgb(219,88,35)"/><text x="86.4672%" y="702.50"></text></g><g><title>_read_variable_op (tensorflow/python/ops/resource_variable_ops.py:645) (26 samples, 1.95%)</title><rect x="88.1648%" y="692" width="1.9476%" height="15" fill="rgb(220,193,23)"/><text x="88.4148%" y="702.50">_..</text></g><g><title>read_and_set_handle (tensorflow/python/ops/resource_variable_ops.py:635) (26 samples, 1.95%)</title><rect x="88.1648%" y="708" width="1.9476%" height="15" fill="rgb(230,90,52)"/><text x="88.4148%" y="718.50">r..</text></g><g><title>read_variable_op (tensorflow/python/ops/gen_resource_variable_ops.py:482) (26 samples, 1.95%)</title><rect x="88.1648%" y="724" width="1.9476%" height="15" fill="rgb(252,106,19)"/><text x="88.4148%" y="734.50">r..</text></g><g><title>_apply_op_helper (tensorflow/python/framework/op_def_library.py:465) (27 samples, 2.02%)</title><rect x="88.1648%" y="612" width="2.0225%" height="15" fill="rgb(206,74,20)"/><text x="88.4148%" y="622.50">_..</text></g><g><title>convert_to_tensor (tensorflow/python/framework/ops.py:1341) (27 samples, 2.02%)</title><rect x="88.1648%" y="628" width="2.0225%" height="15" fill="rgb(230,138,44)"/><text x="88.4148%" y="638.50">c..</text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1825) (27 samples, 2.02%)</title><rect x="88.1648%" y="644" width="2.0225%" height="15" fill="rgb(235,182,43)"/><text x="88.4148%" y="654.50">_..</text></g><g><title>_dense_var_to_tensor (tensorflow/python/ops/resource_variable_ops.py:1242) (27 samples, 2.02%)</title><rect x="88.1648%" y="660" width="2.0225%" height="15" fill="rgb(242,16,51)"/><text x="88.4148%" y="670.50">_..</text></g><g><title>value (tensorflow/python/ops/resource_variable_ops.py:550) (27 samples, 2.02%)</title><rect x="88.1648%" y="676" width="2.0225%" height="15" fill="rgb(248,9,4)"/><text x="88.4148%" y="686.50">v..</text></g><g><title>call (tensorflow/python/keras/layers/normalization.py:741) (58 samples, 4.34%)</title><rect x="86.2172%" y="500" width="4.3446%" height="15" fill="rgb(210,31,22)"/><text x="86.4672%" y="510.50">call ..</text></g><g><title>_fused_batch_norm (tensorflow/python/keras/layers/normalization.py:603) (58 samples, 4.34%)</title><rect x="86.2172%" y="516" width="4.3446%" height="15" fill="rgb(239,54,39)"/><text x="86.4672%" y="526.50">_fuse..</text></g><g><title>smart_cond (tensorflow/python/keras/utils/tf_utils.py:64) (58 samples, 4.34%)</title><rect x="86.2172%" y="532" width="4.3446%" height="15" fill="rgb(230,99,41)"/><text x="86.4672%" y="542.50">smart..</text></g><g><title>smart_cond (tensorflow/python/framework/smart_cond.py:56) (58 samples, 4.34%)</title><rect x="86.2172%" y="548" width="4.3446%" height="15" fill="rgb(253,106,12)"/><text x="86.4672%" y="558.50">smart..</text></g><g><title>_fused_batch_norm_inference (tensorflow/python/keras/layers/normalization.py:585) (58 samples, 4.34%)</title><rect x="86.2172%" y="564" width="4.3446%" height="15" fill="rgb(213,46,41)"/><text x="86.4672%" y="574.50">_fuse..</text></g><g><title>fused_batch_norm (tensorflow/python/ops/nn_impl.py:1535) (34 samples, 2.55%)</title><rect x="88.0150%" y="580" width="2.5468%" height="15" fill="rgb(215,133,35)"/><text x="88.2650%" y="590.50">fu..</text></g><g><title>fused_batch_norm_v3 (tensorflow/python/ops/gen_nn_ops.py:4274) (33 samples, 2.47%)</title><rect x="88.0899%" y="596" width="2.4719%" height="15" fill="rgb(213,28,5)"/><text x="88.3399%" y="606.50">fu..</text></g><g><title>__call__ (tensorflow/python/keras/engine/base_layer.py:927) (152 samples, 11.39%)</title><rect x="79.4757%" y="484" width="11.3858%" height="15" fill="rgb(215,77,49)"/><text x="79.7257%" y="494.50">__call__ (tensorf..</text></g><g><title>_call (tensorflow/python/eager/def_function.py:627) (199 samples, 14.91%)</title><rect x="76.0300%" y="132" width="14.9064%" height="15" fill="rgb(248,100,22)"/><text x="76.2800%" y="142.50">_call (tensorflow/pytho..</text></g><g><title>_initialize (tensorflow/python/eager/def_function.py:505) (199 samples, 14.91%)</title><rect x="76.0300%" y="148" width="14.9064%" height="15" fill="rgb(208,67,9)"/><text x="76.2800%" y="158.50">_initialize (tensorflow..</text></g><g><title>_get_concrete_function_internal_garbage_collected (tensorflow/python/eager/function.py:2446) (199 samples, 14.91%)</title><rect x="76.0300%" y="164" width="14.9064%" height="15" fill="rgb(219,133,21)"/><text x="76.2800%" y="174.50">_get_concrete_function_..</text></g><g><title>_maybe_define_function (tensorflow/python/eager/function.py:2777) (199 samples, 14.91%)</title><rect x="76.0300%" y="180" width="14.9064%" height="15" fill="rgb(246,46,29)"/><text x="76.2800%" y="190.50">_maybe_define_function ..</text></g><g><title>_create_graph_function (tensorflow/python/eager/function.py:2657) (193 samples, 14.46%)</title><rect x="76.4794%" y="196" width="14.4569%" height="15" fill="rgb(246,185,52)"/><text x="76.7294%" y="206.50">_create_graph_function..</text></g><g><title>func_graph_from_py_func (tensorflow/python/framework/func_graph.py:981) (177 samples, 13.26%)</title><rect x="77.6779%" y="212" width="13.2584%" height="15" fill="rgb(252,136,11)"/><text x="77.9279%" y="222.50">func_graph_from_py_f..</text></g><g><title>wrapped_fn (tensorflow/python/eager/def_function.py:441) (177 samples, 13.26%)</title><rect x="77.6779%" y="228" width="13.2584%" height="15" fill="rgb(219,138,53)"/><text x="77.9279%" y="238.50">wrapped_fn (tensorfl..</text></g><g><title>wrapper (tensorflow/python/framework/func_graph.py:957) (177 samples, 13.26%)</title><rect x="77.6779%" y="244" width="13.2584%" height="15" fill="rgb(211,51,23)"/><text x="77.9279%" y="254.50">wrapper (tensorflow/..</text></g><g><title>converted_call (tensorflow/python/autograph/impl/api.py:585) (174 samples, 13.03%)</title><rect x="77.9026%" y="260" width="13.0337%" height="15" fill="rgb(247,221,28)"/><text x="78.1526%" y="270.50">converted_call (tens..</text></g><g><title>tf__predict_function (tmpq9y5w8ki.py:13) (174 samples, 13.03%)</title><rect x="77.9026%" y="276" width="13.0337%" height="15" fill="rgb(251,222,45)"/><text x="78.1526%" y="286.50">tf__predict_function..</text></g><g><title>converted_call (tensorflow/python/autograph/impl/api.py:492) (174 samples, 13.03%)</title><rect x="77.9026%" y="292" width="13.0337%" height="15" fill="rgb(217,162,53)"/><text x="78.1526%" y="302.50">converted_call (tens..</text></g><g><title>_call_unconverted (tensorflow/python/autograph/impl/api.py:346) (174 samples, 13.03%)</title><rect x="77.9026%" y="308" width="13.0337%" height="15" fill="rgb(229,93,14)"/><text x="78.1526%" y="318.50">_call_unconverted (t..</text></g><g><title>run (tensorflow/python/distribute/distribute_lib.py:951) (174 samples, 13.03%)</title><rect x="77.9026%" y="324" width="13.0337%" height="15" fill="rgb(209,67,49)"/><text x="78.1526%" y="334.50">run (tensorflow/pyth..</text></g><g><title>call_for_each_replica (tensorflow/python/distribute/distribute_lib.py:2290) (174 samples, 13.03%)</title><rect x="77.9026%" y="340" width="13.0337%" height="15" fill="rgb(213,87,29)"/><text x="78.1526%" y="350.50">call_for_each_replic..</text></g><g><title>_call_for_each_replica (tensorflow/python/distribute/distribute_lib.py:2649) (174 samples, 13.03%)</title><rect x="77.9026%" y="356" width="13.0337%" height="15" fill="rgb(205,151,52)"/><text x="78.1526%" y="366.50">_call_for_each_repli..</text></g><g><title>wrapper (tensorflow/python/autograph/impl/api.py:262) (174 samples, 13.03%)</title><rect x="77.9026%" y="372" width="13.0337%" height="15" fill="rgb(253,215,39)"/><text x="78.1526%" y="382.50">wrapper (tensorflow/..</text></g><g><title>converted_call (tensorflow/python/autograph/impl/api.py:492) (174 samples, 13.03%)</title><rect x="77.9026%" y="388" width="13.0337%" height="15" fill="rgb(221,220,41)"/><text x="78.1526%" y="398.50">converted_call (tens..</text></g><g><title>_call_unconverted (tensorflow/python/autograph/impl/api.py:346) (174 samples, 13.03%)</title><rect x="77.9026%" y="404" width="13.0337%" height="15" fill="rgb(218,133,21)"/><text x="78.1526%" y="414.50">_call_unconverted (t..</text></g><g><title>predict_step (tensorflow/python/keras/engine/training.py:1125) (174 samples, 13.03%)</title><rect x="77.9026%" y="420" width="13.0337%" height="15" fill="rgb(221,193,43)"/><text x="78.1526%" y="430.50">predict_step (tensor..</text></g><g><title>__call__ (tensorflow/python/keras/engine/base_layer.py:927) (173 samples, 12.96%)</title><rect x="77.9775%" y="436" width="12.9588%" height="15" fill="rgb(240,128,52)"/><text x="78.2275%" y="446.50">__call__ (tensorflo..</text></g><g><title>call (tensorflow/python/keras/engine/network.py:717) (173 samples, 12.96%)</title><rect x="77.9775%" y="452" width="12.9588%" height="15" fill="rgb(253,114,12)"/><text x="78.2275%" y="462.50">call (tensorflow/py..</text></g><g><title>_run_internal_graph (tensorflow/python/keras/engine/network.py:888) (172 samples, 12.88%)</title><rect x="78.0524%" y="468" width="12.8839%" height="15" fill="rgb(215,223,47)"/><text x="78.3024%" y="478.50">_run_internal_graph..</text></g><g><title>&lt;module&gt; (test.py:94) (334 samples, 25.02%)</title><rect x="74.6816%" y="52" width="25.0187%" height="15" fill="rgb(248,225,23)"/><text x="74.9316%" y="62.50">&lt;module&gt; (test.py:94)</text></g><g><title>nasnet_feature_extractor (test.py:28) (333 samples, 24.94%)</title><rect x="74.7566%" y="68" width="24.9438%" height="15" fill="rgb(250,108,0)"/><text x="75.0066%" y="78.50">nasnet_feature_extractor (test.py:28)</text></g><g><title>_method_wrapper (tensorflow/python/keras/engine/training.py:88) (333 samples, 24.94%)</title><rect x="74.7566%" y="84" width="24.9438%" height="15" fill="rgb(228,208,7)"/><text x="75.0066%" y="94.50">_method_wrapper (tensorflow/python/keras..</text></g><g><title>predict (tensorflow/python/keras/engine/training.py:1271) (317 samples, 23.75%)</title><rect x="75.9551%" y="100" width="23.7453%" height="15" fill="rgb(244,45,10)"/><text x="76.2051%" y="110.50">predict (tensorflow/python/keras/engin..</text></g><g><title>__call__ (tensorflow/python/eager/def_function.py:580) (317 samples, 23.75%)</title><rect x="75.9551%" y="116" width="23.7453%" height="15" fill="rgb(207,125,25)"/><text x="76.2051%" y="126.50">__call__ (tensorflow/python/eager/def_..</text></g><g><title>_call (tensorflow/python/eager/def_function.py:650) (117 samples, 8.76%)</title><rect x="90.9363%" y="132" width="8.7640%" height="15" fill="rgb(210,195,18)"/><text x="91.1863%" y="142.50">_call (tenso..</text></g><g><title>_filtered_call (tensorflow/python/eager/function.py:1661) (117 samples, 8.76%)</title><rect x="90.9363%" y="148" width="8.7640%" height="15" fill="rgb(249,80,12)"/><text x="91.1863%" y="158.50">_filtered_ca..</text></g><g><title>_call_flat (tensorflow/python/eager/function.py:1745) (117 samples, 8.76%)</title><rect x="90.9363%" y="164" width="8.7640%" height="15" fill="rgb(221,65,9)"/><text x="91.1863%" y="174.50">_call_flat (..</text></g><g><title>call (tensorflow/python/eager/function.py:593) (117 samples, 8.76%)</title><rect x="90.9363%" y="180" width="8.7640%" height="15" fill="rgb(235,49,36)"/><text x="91.1863%" y="190.50">call (tensor..</text></g><g><title>quick_execute (tensorflow/python/eager/execute.py:59) (117 samples, 8.76%)</title><rect x="90.9363%" y="196" width="8.7640%" height="15" fill="rgb(225,32,20)"/><text x="91.1863%" y="206.50">quick_execut..</text></g><g><title>all (1,335 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(215,141,46)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>